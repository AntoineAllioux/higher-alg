{-# OPTIONS --without-K --rewriting #-}

open import HoTT
open import Util
open import Polynomial
open import Substitution

-- Attempts at fixing n-globularity
module NGlob where

  module _ {‚Ñì} {I : Type ‚Ñì} {P : Poly I} (R‚ÇÄ : PolyRel P)
    (œÉ‚ÇÄ : {i : I} {f : Op P i} (pd : W (P // R‚ÇÄ) (i , f))
      ‚Üí R‚ÇÄ (flatten R‚ÇÄ pd) f (flatten-frm R‚ÇÄ pd)) where

    -- Okay, suppose we have a section.

    Q : PolyRel (P // R‚ÇÄ)
    Q {i , f} pd (w , Œ± , r) Œ≤ = 
      Path {A = OutFrame (P // R‚ÇÄ) pd} 
        ((flatten R‚ÇÄ pd , flatten-frm R‚ÇÄ pd , œÉ‚ÇÄ pd) , bd-frame R‚ÇÄ pd)
        ((w , Œ± , r) , Œ≤)

    postulate

      flatten-flatten : {i : I} {f : Op P i}
        ‚Üí (w : W P i) (Œ± : Frame P w f) (r : R‚ÇÄ w f Œ±)
        ‚Üí (coh : W ((P // R‚ÇÄ) // Q) ((i , f) , (w , Œ± , r)))
        ‚Üí flatten R‚ÇÄ (flatten Q coh) == w

      flatten-frm-flatten : {i : I} {f : Op P i}
        ‚Üí (w : W P i) (Œ± : Frame P w f) (r : R‚ÇÄ w f Œ±)
        ‚Üí (coh : W ((P // R‚ÇÄ) // Q) ((i , f) , (w , Œ± , r)))
        ‚Üí flatten-frm R‚ÇÄ (flatten Q coh) == Œ±
            [ (Œª w‚ÇÅ ‚Üí Frame P w‚ÇÅ f) ‚Üì flatten-flatten w Œ± r coh ]

      flatten-bd-flatten : {i : I} {f : Op P i}
        ‚Üí (w : W P i) (Œ± : Frame P w f) (r : R‚ÇÄ w f Œ±)
        ‚Üí (coh : W ((P // R‚ÇÄ) // Q) ((i , f) , (w , Œ± , r)))
        ‚Üí (s : R‚ÇÄ (flatten R‚ÇÄ (flatten Q coh)) f (flatten-frm R‚ÇÄ (flatten Q coh)))
        ‚Üí (q : s == r [ (Œª x ‚Üí R‚ÇÄ (fst x) f (snd x)) ‚Üì  pair= (flatten-flatten w Œ± r coh) (flatten-frm-flatten w Œ± r coh) ])
        ‚Üí bd-frame R‚ÇÄ (flatten Q coh) == flatten-frm Q coh
            [ Frame (P // R‚ÇÄ) (flatten Q coh) ‚Üì pair= (flatten-flatten w Œ± r coh) (‚Üì-Œ£-in (flatten-frm-flatten w Œ± r coh) q) ]


  module _ {‚Ñì} {I : Type ‚Ñì} {P : Poly I} (R‚ÇÄ : PolyRel P)
    (œÉ‚ÇÄ : {i : I} {f : Op P i} (pd : W (P // R‚ÇÄ) (i , f))
      ‚Üí R‚ÇÄ (flatten R‚ÇÄ pd) f (flatten-frm R‚ÇÄ pd)) where

    R‚ÇÅ : PolyRel (P // R‚ÇÄ)
    R‚ÇÅ = Q R‚ÇÄ œÉ‚ÇÄ

    postulate

      œÉ‚ÇÄ-coh : {i : I} {f : Op P i}
        ‚Üí (w : W P i) (Œ± : Frame P w f) (r : R‚ÇÄ w f Œ±)
        ‚Üí (coh : W ((P // R‚ÇÄ) // R‚ÇÅ) ((i , f) , (w , Œ± , r)))
        ‚Üí œÉ‚ÇÄ (flatten R‚ÇÅ coh) == r
            [ (Œª x ‚Üí R‚ÇÄ (fst x) f (snd x)) ‚Üì pair= (flatten-flatten R‚ÇÄ œÉ‚ÇÄ w Œ± r coh) (flatten-frm-flatten R‚ÇÄ œÉ‚ÇÄ w Œ± r coh) ]
  
    -- As well as their dependent counterparts...

    -- ‚Üì-=-in : ‚àÄ {i j} {A : Type i} {B : A ‚Üí Type j} {f g : Œ† A B}
    --   {x y : A} {p : x == y} {u : g x == f x} {v : g y == f y}
    --   ‚Üí (u ‚óÉ apd f p) == (apd g p ‚ñπ v)
    --   ‚Üí (u == v [ (Œª x ‚Üí g x == f x) ‚Üì p ])
    -- ‚Üì-=-in {B = B} {p = idp} {u} {v} q = ! (‚óÉidp {B = B} u) ‚àô q ‚àô idp‚ñπ {B = B} v

    -- Q : PolyRel (P // R‚ÇÄ)
    -- Q {i , f} pd (w , Œ± , r) Œ≤ = 
    --   Path {A = OutFrame (P // R‚ÇÄ) pd} 
    --     ((flatten R‚ÇÄ pd , flatten-frm R‚ÇÄ pd , œÉ‚ÇÄ pd) , bd-frame R‚ÇÄ pd)
    --     ((w , Œ± , r) , Œ≤)

    -- Goal: PathOver
    --       (Œª x ‚Üí
    --          R‚ÇÅ (fst x)
    --          (flatten (Œª {;i} ‚Üí R‚ÇÄ) pd , (Œª j ‚Üí flatten-frm R‚ÇÄ pd j) , œÉ‚ÇÄ pd)
    --          (snd x))
    --       (pair=
    --        (flatten-flatten (Œª {;i} ‚Üí R‚ÇÅ) (Œª {;i} {;f} ‚Üí œÉ‚ÇÅ) pd
    --         (bd-frame (Œª {;i} ‚Üí R‚ÇÄ) pd) idp trp)
    --        (flatten-frm-flatten (Œª {;i} ‚Üí R‚ÇÅ) (Œª {;i} {;f} ‚Üí œÉ‚ÇÅ) pd
    --         (bd-frame (Œª {;i} ‚Üí R‚ÇÄ) pd) idp trp))
    --       (œÉ‚ÇÅ (flatten (Œª {;i} ‚Üí R‚ÇÇ) trp)) idp


    -- Okay.  So, ummm. Can you make a formal statement about the invariance property
    -- of flattening with respect to the choice of œÉ‚ÇÄ-coh?

    -- It should apply when I have a pasting diagram (pd : W (P // R‚ÇÄ) (i , f)).
    -- I want it to be the case that the relations in this pasting diagram are
    -- all obtained somehow from the equality over given above.  But I am not
    -- sure to completely understand what this means.

    -- But the claim, somehow, is that given a pasting diagram as above populated
    -- by such path overs, apping the flatten function to the resulting equality
    -- of trees gives the same path regardless of the choice of œÉ‚ÇÄ-coh.

    -- I think I am starting to see a way forward.  What seems incredibly bothersome is that
    -- I appear to be picking a coherence here out of a hat.  And that should never be good.
    -- And there is clearly no reason why the choice here should be unique in any way.

    -- *But*, what I seem to be claiming is that while not every other choice will be equal to this
    -- one, since the substitution functions ignore their relation argument, any other choice will
    -- induce the *same* equality after flattening, etc.

    -- Okay.  There must be something to this.  Or, at least, this clearly seems like
    -- a property that you have not yet learned to exploit.

    -- And my intuition for why the equality you are trying to prove below may actually
    -- be true is that it is a fancy version of the fact that ap'ing a constant function
    -- to *any* path results in the identity.

    -- So, from here the question is, can you repeat?  Let's write out
    -- what we need for the section:

    œÉ‚ÇÅ : {f : Ops P} {w : Op (P // R‚ÇÄ) f}
      ‚Üí (coh : W ((P // R‚ÇÄ) // R‚ÇÅ) (f , w))
      ‚Üí R‚ÇÅ (flatten R‚ÇÅ coh) w (flatten-frm R‚ÇÅ coh)
    œÉ‚ÇÅ {i , f} {w , Œ± , r} coh = pair= (pair= (flatten-flatten R‚ÇÄ œÉ‚ÇÄ w Œ± r coh)
      (‚Üì-Œ£-in (flatten-frm-flatten R‚ÇÄ œÉ‚ÇÄ w Œ± r coh) (œÉ‚ÇÄ-coh w Œ± r coh)))
        (flatten-bd-flatten R‚ÇÄ œÉ‚ÇÄ w Œ± r coh (œÉ‚ÇÄ (flatten R‚ÇÅ coh)) (œÉ‚ÇÄ-coh w Œ± r coh))

    -- There you have it, pretty straightforward.
    -- The next step is the hard part.  The task is to
    -- show the above coherence in the *next* slice.

    -- I claim that this corresponds, essentially, to the
    -- *target* globularity condition.  And if it happens that
    -- it can be proven without additional hypotheses on œÉ‚ÇÄ,
    -- then I claim this implies the monad structure of ùïå.

    R‚ÇÇ : PolyRel ((P // R‚ÇÄ) // R‚ÇÅ)
    R‚ÇÇ = Q R‚ÇÅ œÉ‚ÇÅ

    -- œÉ‚ÇÇ : {w : Ops (P // R‚ÇÄ)} {pd : Op ((P // R‚ÇÄ) // R‚ÇÅ) w} (trp : W (((P // R‚ÇÄ) // R‚ÇÅ) // R‚ÇÇ) (w , pd))
    --   ‚Üí R‚ÇÇ (flatten R‚ÇÇ trp) pd (flatten-frm R‚ÇÇ trp)
    -- œÉ‚ÇÇ {(i , f) , (.(flatten R‚ÇÄ pd) , .(flatten-frm R‚ÇÄ pd) , .(œÉ‚ÇÄ pd))} {pd , .(bd-frame R‚ÇÄ pd) , idp} trp =
    --   pair= (pair= (flatten-flatten R‚ÇÅ œÉ‚ÇÅ pd (bd-frame R‚ÇÄ pd) idp trp)
    --     (‚Üì-Œ£-in (flatten-frm-flatten R‚ÇÅ œÉ‚ÇÅ pd (bd-frame R‚ÇÄ pd) idp trp) (‚Üì-=-in {!!})))
    --       (flatten-bd-flatten R‚ÇÅ œÉ‚ÇÅ pd (bd-frame R‚ÇÄ pd) idp trp (œÉ‚ÇÅ (flatten R‚ÇÇ trp)) {!!})

    -- Okay, so I claim that we should be able to reduce, after path induction
    -- to the following cases:

    module _ {i : I} {i : I} {f : Op P i}
      (pd : W (P // R‚ÇÄ) (i , f))
      (trp : W (((P // R‚ÇÄ) // R‚ÇÅ) // R‚ÇÇ) (((i , f) , flatten R‚ÇÄ pd , flatten-frm R‚ÇÄ pd , œÉ‚ÇÄ pd) , pd , bd-frame R‚ÇÄ pd , idp)) where
  
      canon-pth : (flatten R‚ÇÅ (flatten R‚ÇÇ trp) , flatten-frm R‚ÇÅ (flatten R‚ÇÇ trp)) == (pd , bd-frame R‚ÇÄ pd)
      canon-pth = pair= (flatten-flatten R‚ÇÅ œÉ‚ÇÅ pd (bd-frame R‚ÇÄ pd) idp trp)
        (flatten-frm-flatten R‚ÇÅ œÉ‚ÇÅ pd (bd-frame R‚ÇÄ pd) idp trp)
        
      goal : œÉ‚ÇÅ (flatten R‚ÇÇ trp) == idp [ (Œª x ‚Üí R‚ÇÅ (fst x) (flatten R‚ÇÄ pd , flatten-frm R‚ÇÄ pd , œÉ‚ÇÄ pd) (snd x)) ‚Üì canon-pth ]
      goal = ‚Üì-=-in {!!}

    -- Q : PolyRel (P // R‚ÇÄ)
    -- Q {i , f} pd (w , Œ± , r) Œ≤ = 
    --   Path {A = OutFrame (P // R‚ÇÄ) pd} 
    --     ((flatten R‚ÇÄ pd , flatten-frm R‚ÇÄ pd , œÉ‚ÇÄ pd) , bd-frame R‚ÇÄ pd)
    --     ((w , Œ± , r) , Œ≤)

      -- flatten‚ÇÇ : ap (flatten R‚ÇÄ) (flatten-flatten R‚ÇÅ œÉ‚ÇÅ pd (bd-frame R‚ÇÄ pd) idp trp) ==
      --            flatten-flatten R‚ÇÄ œÉ‚ÇÄ (flatten R‚ÇÄ pd) (flatten-frm R‚ÇÄ pd) (œÉ‚ÇÄ pd) (flatten R‚ÇÇ trp)
      -- flatten‚ÇÇ = {!!}

      -- apd‚Üì : ‚àÄ {i j k} {A : Type i} {B : A ‚Üí Type j} {C : (a : A) ‚Üí B a ‚Üí Type k}
      --   (f : {a : A} (b : B a) ‚Üí C a b) {x y : A} {p : x == y}
      --   {u : B x} {v : B y} (q : u == v [ B ‚Üì p ])
      --   ‚Üí f u == f v [ (Œª xy ‚Üí C (fst xy) (snd xy)) ‚Üì pair= p q ]
      -- apd‚Üì f {p = idp} idp = idp

      -- flatten-frm‚ÇÇ : apd (flatten-frm R‚ÇÄ) (flatten-flatten R‚ÇÅ œÉ‚ÇÅ pd (bd-frame R‚ÇÄ pd) idp trp) ==
      --                {!flatten-frm-flatten R‚ÇÄ œÉ‚ÇÄ (flatten R‚ÇÄ pd) (flatten-frm R‚ÇÄ pd) (œÉ‚ÇÄ pd) (flatten R‚ÇÇ trp)!}
      -- flatten-frm‚ÇÇ = {!!}




