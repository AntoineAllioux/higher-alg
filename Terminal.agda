{-# OPTIONS --without-K --rewriting --type-in-type #-}

open import HoTT
open import Util
open import Polynomial
open import Substitution
open import Morphism

-- Attempting to construct the terminal cart-poly-monad.
module Terminal where

  ùïå : Poly ‚ä§
  Œ≥ ùïå unit = Type‚ÇÄ
  œÅ ùïå X unit = X

  TermFamily : {I : Type‚ÇÄ} (P : Poly I) ‚Üí FillingFamily P
  TermFamily P w c f = ‚ä§

  TermDomain : {I : Type‚ÇÄ} (P : Poly I) ‚Üí PolyDomain P
  F (TermDomain P) = TermFamily P
  H (TermDomain P) = TermDomain (P // TermFamily P)

  module _ {I : Type‚ÇÄ} {P : Poly I} (F‚ÇÄ : FillingFamily P) where

    record BDWitness {i : I} {c : Œ≥ P i} (pd : W (P // F‚ÇÄ) (i , c))
      (w : W P i) (f‚ÇÄ : Frame P w c) (x‚ÇÄ : F‚ÇÄ w c f‚ÇÄ)
      (f‚ÇÅ : Frame (P // F‚ÇÄ) pd (w , f‚ÇÄ , x‚ÇÄ)) : Type‚ÇÄ where
      constructor bd-wit
      field
        p‚ÇÄ : w == flatten F‚ÇÄ pd
        p‚ÇÅ : f‚ÇÄ == flatten-frm F‚ÇÄ pd [ (Œª a ‚Üí Frame P a c) ‚Üì p‚ÇÄ ]
        p‚ÇÇ : f‚ÇÅ == bd-frame F‚ÇÄ pd [ (Œª a ‚Üí Frame (P // F‚ÇÄ) pd a) ‚Üì pair= p‚ÇÄ (‚Üì-Œ£-in p‚ÇÅ (to-transp-‚Üì (uncurry (Œª a ‚Üí F‚ÇÄ a c)) (pair= p‚ÇÄ p‚ÇÅ) x‚ÇÄ)) ] 

    -- The canonical extension, adding a witness that fillers are always
    -- in baez-dolan frames.
    BDExt : (F‚ÇÅ : FillingFamily (P // F‚ÇÄ)) ‚Üí Extension F‚ÇÅ
    BDExt F‚ÇÅ {i , c} pd (w , f‚ÇÄ , x‚ÇÄ) f‚ÇÅ x‚ÇÅ = BDWitness pd w f‚ÇÄ x‚ÇÄ f‚ÇÅ 

  {-# TERMINATING #-}
  BDDomain : {I : Type‚ÇÄ} (P : Poly I) (F‚ÇÄ : FillingFamily P)
    ‚Üí PolyDomain (P // F‚ÇÄ)
    ‚Üí PolyDomain (P // F‚ÇÄ)
  F (BDDomain P F‚ÇÄ D) = Œ£Fam (F D) (BDExt F‚ÇÄ (F D))
  H (BDDomain P F‚ÇÄ D) = Domain‚Üê (ExtendedFst (F D) (BDExt F‚ÇÄ (F D))) (BDDomain (P // F‚ÇÄ) (F D) (H D))


  -- So, here is the version that you had before.

  -- -- I see, and I think here again, we shoul have a kind of equivalence.
  -- postulate

  --   compat : {I : Type‚ÇÄ} {P : Poly I} (F : FillingFamily P) (E : Extension F)
  --     ‚Üí Œ£Poly (ExtOver F E) == P // ExtendedFamily F E [ Poly ‚Üì {!!} ]

  --   BDExtension : {I : Type‚ÇÄ} {P : Poly I}
  --     ‚Üí (F‚ÇÄ : FillingFamily P) (F‚ÇÅ : FillingFamily (P // F‚ÇÄ))
  --     ‚Üí Extension F‚ÇÅ

  --   CanExtend : {I : Type‚ÇÄ} {P : Poly I} (F : FillingFamily P) (E : Extension F)
  --     ‚Üí PolyDomain (P // F) ‚Üí PolyDomain (P // ExtendedFamily F E)

  -- -- Something like this is what you had in mind.  Except does this version skip
  -- -- too much? Yeah, something is fishy about this guy.  Or I'm not completely
  -- -- sure.  Maybe it's actually okay.  I have no idea what to do about termination ....
  -- {-# TERMINATING #-}
  -- BDDomain : {I : Type‚ÇÄ} {P : Poly I} (D : PolyDomain P) ‚Üí PolyDomain P
  -- F (BDDomain {I} {P} D) = F D
  -- F (H (BDDomain {I} {P} D)) = ExtendedFamily (F (H D)) (BDExtension (F D) (F (H D)))
  -- H (H (BDDomain {I} {P} D)) = CanExtend (F (H D)) (BDExtension (F D) (F (H D))) (BDDomain (H (H D)))

