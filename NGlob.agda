{-# OPTIONS --without-K --rewriting #-}

open import HoTT
open import Util
open import Polynomial
open import Substitution

-- Attempts at fixing n-globularity
module NGlob where

  module _ {‚Ñì} {I : Type ‚Ñì} {P : Poly I} (R‚ÇÄ : PolyRel P)
    (œÉ‚ÇÄ : {i : I} {f : Op P i} (pd : W (P // R‚ÇÄ) (i , f))
      ‚Üí R‚ÇÄ (flatten R‚ÇÄ pd) f (flatten-frm R‚ÇÄ pd)) where

    -- Okay, suppose we have a section.

    Q : PolyRel (P // R‚ÇÄ)
    Q {i , f} pd (w , Œ± , r) Œ≤ = 
      Path {A = OutFrame (P // R‚ÇÄ) pd} 
        ((flatten R‚ÇÄ pd , flatten-frm R‚ÇÄ pd , œÉ‚ÇÄ pd) , bd-frame R‚ÇÄ pd)
        ((w , Œ± , r) , Œ≤)

    postulate

      flatten-flatten : {i : I} {f : Op P i}
        ‚Üí (w : W P i) (Œ± : Frame P w f) (r : R‚ÇÄ w f Œ±)
        ‚Üí (coh : W ((P // R‚ÇÄ) // Q) ((i , f) , (w , Œ± , r)))
        ‚Üí flatten R‚ÇÄ (flatten Q coh) == w

      flatten-frm-flatten : {i : I} {f : Op P i}
        ‚Üí (w : W P i) (Œ± : Frame P w f) (r : R‚ÇÄ w f Œ±)
        ‚Üí (coh : W ((P // R‚ÇÄ) // Q) ((i , f) , (w , Œ± , r)))
        ‚Üí flatten-frm R‚ÇÄ (flatten Q coh) == Œ±
            [ (Œª w‚ÇÅ ‚Üí Frame P w‚ÇÅ f) ‚Üì flatten-flatten w Œ± r coh ]

      flatten-bd-flatten : {i : I} {f : Op P i}
        ‚Üí (w : W P i) (Œ± : Frame P w f) (r : R‚ÇÄ w f Œ±)
        ‚Üí (coh : W ((P // R‚ÇÄ) // Q) ((i , f) , (w , Œ± , r)))
        ‚Üí (s : R‚ÇÄ (flatten R‚ÇÄ (flatten Q coh)) f (flatten-frm R‚ÇÄ (flatten Q coh)))
        ‚Üí (q : s == r [ (Œª x ‚Üí R‚ÇÄ (fst x) f (snd x)) ‚Üì  pair= (flatten-flatten w Œ± r coh) (flatten-frm-flatten w Œ± r coh) ])
        ‚Üí bd-frame R‚ÇÄ (flatten Q coh) == flatten-frm Q coh
            [ Frame (P // R‚ÇÄ) (flatten Q coh) ‚Üì pair= (flatten-flatten w Œ± r coh) (‚Üì-Œ£-in (flatten-frm-flatten w Œ± r coh) q) ]



  module _ {‚Ñì} {I : Type ‚Ñì} {P : Poly I} (R‚ÇÄ : PolyRel P)
    (œÉ‚ÇÄ : {i : I} {f : Op P i} (pd : W (P // R‚ÇÄ) (i , f))
      ‚Üí R‚ÇÄ (flatten R‚ÇÄ pd) f (flatten-frm R‚ÇÄ pd)) where

    R‚ÇÅ : PolyRel (P // R‚ÇÄ)
    R‚ÇÅ = Q R‚ÇÄ œÉ‚ÇÄ

    postulate

      œÉ‚ÇÄ-coh : {i : I} {f : Op P i}
        ‚Üí (w : W P i) (Œ± : Frame P w f) (r : R‚ÇÄ w f Œ±)
        ‚Üí (coh : W ((P // R‚ÇÄ) // R‚ÇÅ) ((i , f) , (w , Œ± , r)))
        ‚Üí œÉ‚ÇÄ (flatten R‚ÇÅ coh) == r
            [ (Œª x ‚Üí R‚ÇÄ (fst x) f (snd x)) ‚Üì pair= (flatten-flatten R‚ÇÄ œÉ‚ÇÄ w Œ± r coh) (flatten-frm-flatten R‚ÇÄ œÉ‚ÇÄ w Œ± r coh) ]

    -- So, from here the question is, can you repeat?  Let's write out
    -- what we need for the section:

    œÉ‚ÇÅ : {f : Ops P} {w : Op (P // R‚ÇÄ) f}
      ‚Üí (coh : W ((P // R‚ÇÄ) // R‚ÇÅ) (f , w))
      ‚Üí R‚ÇÅ (flatten R‚ÇÅ coh) w (flatten-frm R‚ÇÅ coh)
    œÉ‚ÇÅ {i , f} {w , Œ± , r} coh = pair= (pair= (flatten-flatten R‚ÇÄ œÉ‚ÇÄ w Œ± r coh)
      (‚Üì-Œ£-in (flatten-frm-flatten R‚ÇÄ œÉ‚ÇÄ w Œ± r coh) (œÉ‚ÇÄ-coh w Œ± r coh)))
        (flatten-bd-flatten R‚ÇÄ œÉ‚ÇÄ w Œ± r coh (œÉ‚ÇÄ (flatten R‚ÇÅ coh)) (œÉ‚ÇÄ-coh w Œ± r coh))

    -- There you have it, pretty straightforward.
    -- The next step is the hard part.  The task is to
    -- show the above coherence in the *next* slice.

    -- I claim that this corresponds, essentially, to the
    -- *target* globularity condition.  And if it happens that
    -- it can be proven without additional hypotheses on œÉ‚ÇÄ,
    -- then I claim this implies the monad structure of ùïå.

    -- If, on the other hand, it *does* require some kind of hypotheses
    -- on œÉ‚ÇÄ, then I still don't see that we're sunk.

    R‚ÇÇ : PolyRel ((P // R‚ÇÄ) // R‚ÇÅ)
    R‚ÇÇ = Q R‚ÇÅ œÉ‚ÇÅ

    œÉ‚ÇÇ : {w : Ops (P // R‚ÇÄ)} {pd : Op ((P // R‚ÇÄ) // R‚ÇÅ) w} (trp : W (((P // R‚ÇÄ) // R‚ÇÅ) // R‚ÇÇ) (w , pd))
      ‚Üí R‚ÇÇ (flatten R‚ÇÇ trp) pd (flatten-frm R‚ÇÇ trp)
    œÉ‚ÇÇ {(i , f) , (w , Œ± , r)} {pd , Œ≤ , s} trp = pair= (pair= (flatten-flatten R‚ÇÅ œÉ‚ÇÅ pd Œ≤ s trp)
      (‚Üì-Œ£-in (flatten-frm-flatten R‚ÇÅ œÉ‚ÇÅ pd Œ≤ s trp) (‚Üì-=-in {!!})))
        (flatten-bd-flatten R‚ÇÅ œÉ‚ÇÅ pd Œ≤ s trp (œÉ‚ÇÅ (flatten R‚ÇÇ trp)) {!!})

    -- Mmm.  Right.  So it is, just as you say, a globular relation of sorts.
    -- You're being asked to show that the composition of two flatten-flattens
    -- is the same as "apping" flatten to the guy you had.

    -- So this is as you expected ...

    -- And the question is, will this somehow get worse?  But it seems like in the
    -- next dimension, I will see the exact same problem, as opposed to a three fold
    -- composite.

  --   R‚ÇÇ : PolyRel ((P // R‚ÇÄ) // R‚ÇÅ)
  --   R‚ÇÇ {(i , f) , (w , Œ± , r)} coh (pd , Œ≤ , s) Œ≥ =
  --     Path {A = OutFrame ((P // R‚ÇÄ) // R‚ÇÅ) coh}
  --       ((flatten R‚ÇÅ coh , flatten-frm R‚ÇÅ coh , globular P R‚ÇÄ R‚ÇÅ R‚ÇÅ-regular w Œ± r coh) , bd-frame R‚ÇÅ coh)
  --       ((pd , Œ≤ , s) , Œ≥)

  --   R‚ÇÇ-mult : is-multiplicative ((P // R‚ÇÄ) // R‚ÇÅ) R‚ÇÇ
  --   R‚ÇÇ-mult {(i , f) , (w , Œ± , r)} coh = has-level-in (ctr , pth)

  --     where ctr : Composite ((P // R‚ÇÄ) // R‚ÇÅ) R‚ÇÇ coh
  --           ctr = (flatten R‚ÇÅ coh , flatten-frm R‚ÇÅ coh , globular P R‚ÇÄ R‚ÇÅ R‚ÇÅ-regular w Œ± r coh) , bd-frame R‚ÇÅ coh , idp 

  --           pth : (cmp : Composite ((P // R‚ÇÄ) // R‚ÇÅ) R‚ÇÇ coh) ‚Üí ctr == cmp
  --           pth ((._ , ._ , ._) , ._ , idp) = idp

  --   R‚ÇÇ-regular : is-regular (P // R‚ÇÄ) R‚ÇÅ R‚ÇÇ
  --   R‚ÇÇ-regular {i , f} {w , Œ± , r} pd Œ≤ s coh Œ≥ t =
  --     globular P R‚ÇÄ R‚ÇÅ R‚ÇÅ-regular w Œ± r coh , t

  --   R‚ÇÉ : PolyRel (((P // R‚ÇÄ) // R‚ÇÅ) // R‚ÇÇ)
  --   R‚ÇÉ {((i , f) , (w , Œ± , r)) , (pd , Œ≤ , s)} trpl (coh , Œ≥ , t) Œ¥ = 
  --     Path {A = OutFrame (((P // R‚ÇÄ) // R‚ÇÅ) // R‚ÇÇ) trpl}
  --       ((flatten R‚ÇÇ trpl , flatten-frm R‚ÇÇ trpl , pair= (pair= idp (pair= idp {!!})) {!!} ‚àô
  --         (snd (globular (P // R‚ÇÄ) R‚ÇÅ R‚ÇÇ R‚ÇÇ-regular pd Œ≤ s trpl))) , bd-frame R‚ÇÇ trpl)
  --       ((coh , Œ≥ , t) , Œ¥)

  --   -- R‚ÇÉ-regular : is-regular ((P // R‚ÇÄ) // R‚ÇÅ) R‚ÇÇ R‚ÇÉ
  --   -- R‚ÇÉ-regular {((i , f) , (w , Œ± , r))} {(pd , Œ≤ , s)} coh Œ≥ t trpl Œ¥ u =
  --   --   (pair= (pair= idp (pair= idp {!!})) {!!} ‚àô
  --   --       (snd (globular (P // R‚ÇÄ) R‚ÇÅ R‚ÇÇ R‚ÇÇ-regular pd Œ≤ s trpl))) , u

  --   -- R‚ÇÑ : PolyRel ((((P // R‚ÇÄ) // R‚ÇÅ) // R‚ÇÇ) // R‚ÇÉ)
  --   -- R‚ÇÑ = {!!}

  --   -- So I have an idea: what if you split the globularity statement into two
  --   -- pieces, one which says that you get this identification and a second which
  --   -- says, given an appropriate path-over, you get a baez-dolan identification
  --   -- as well.

  --   -- Because you see over and over again that somehow the natural division
  --   -- is grouping the tree and frame together and working about the filler
  --   -- and baez-dolan frame after.  Maybe this would give you more flexibility.

  --   -- Well, well, well.  So now that looks pretty interesting.
  --   -- Uh, yeah.  This is starting to look completely doable.

  --   -- It very much looks to me like, given this one extra fact about the targets
  --   -- of iterated applications of globular, that the resulting sequence after
  --   -- n = 3 stabilizes and becomes provable by induction.

  --   --
  --   --  Generalizing over n ...
  --   --

  --   -- RSort : (n : ‚Ñï) ‚Üí Type ‚Ñì
  --   -- RPoly : (n : ‚Ñï) ‚Üí Poly (RSort n)
  --   -- RRel : (n : ‚Ñï) ‚Üí PolyRel (RPoly n)

  --   -- RSort O = I
  --   -- RSort (S n) = Ops (RPoly n)

  --   -- RPoly O = P 
  --   -- RPoly (S n) = RPoly n // RRel n

  --   -- postulate

  --   --   1-glob : (n : ‚Ñï) {i : RSort n} {f : Op (RPoly n) i}
  --   --     ‚Üí (pd : W (RPoly n // RRel n) (i , f))
  --   --     ‚Üí (w : W (RPoly n) i) (Œ± : Frame (RPoly n) w f) (r : (RRel n) w f Œ±)
  --   --     ‚Üí (Œ≤ : Frame (RPoly (S n)) pd (w , Œ± , r))
  --   --     ‚Üí Œ£ (RRel n (flatten (RRel n) pd) f (flatten-frm (RRel n) pd))
  --   --         (Œª r‚ÇÄ ‚Üí Path {A = OutFrame (RPoly (S n)) pd}
  --   --                      ((flatten (RRel n) pd , flatten-frm (RRel n) pd , r‚ÇÄ) , bd-frame (RRel n) pd)
  --   --                      ((w , Œ± , r) , Œ≤))

  --   -- n-glob : (n : ‚Ñï) {i : RSort n} {f : Op (RPoly n) i}
  --   --   ‚Üí (w : W (RPoly n) i) (Œ± : Frame (RPoly n) w f) (r : (RRel n) w f Œ±)
  --   --   ‚Üí (coh : W ((RPoly n // RRel n) // RRel (S n)) ((i , f) , (w , Œ± , r)))
  --   --   ‚Üí RRel (S n) (flatten (RRel (S n)) coh) (w , Œ± , r) (flatten-frm (RRel (S n)) coh)

  --   -- RRel O = R‚ÇÄ
  --   -- RRel (S O) {i , f} pd (w , Œ± , r) Œ≤ =
  --   --   Œ£ (R‚ÇÄ (flatten R‚ÇÄ pd) f (flatten-frm R‚ÇÄ pd))
  --   --     (Œª s ‚Üí Path {A = OutFrame (P // R‚ÇÄ) pd} 
  --   --              ((flatten R‚ÇÄ pd , flatten-frm R‚ÇÄ pd , s) , bd-frame R‚ÇÄ pd)
  --   --              ((w , Œ± , r) , Œ≤))
  --   -- RRel (S (S n)) {(i , f) , (w , Œ± , r)} coh (pd , Œ≤ , s) Œ≥ =
  --   --   Path {A = OutFrame (RPoly (S n) // RRel (S n)) coh}
  --   --     ((flatten (RRel (S n)) coh , flatten-frm (RRel (S n)) coh , n-glob n w Œ± r coh) , bd-frame (RRel (S n)) coh)
  --   --     ((pd , Œ≤ , s) , Œ≥)


  --   -- n-glob = {!!}
    
  --   -- -- n-glob O w Œ± r coh = glob‚ÇÅ w Œ± r coh
  --   -- -- n-glob (S O) {i , f} {._ , ._ , r} pd ._ (.r , idp) coh = {!!}
  --   -- -- n-glob (S (S n)) {i , f} {w , Œ± , r} pd Œ≤ s coh = {!!}

  --   -- -- n-glob O w Œ± r coh = glob‚ÇÅ w Œ± r coh
  --   -- -- n-glob (S O) {i , f} {w , Œ± , r} pd Œ≤ s coh = {!!}
  --   -- -- n-glob (S (S n)) {i , f} {w , Œ± , r} pd Œ≤ s coh = {!ih!}

  --   -- --   where ih : RRel (S (S n)) (flatten (RRel (S (S n))) (flatten (RRel (S (S (S n)))) coh)) (w , Œ± , r)
  --   -- --                         (flatten-frm (RRel (S (S n))) (flatten (RRel (S (S (S n)))) coh))
  --   -- --         ih = n-glob (S n) w Œ± r (flatten (RRel (S (S (S n)))) coh)


  --   -- -- n-glob (S n) {i , f} {w , Œ± , r} pd Œ≤ s coh = {! !}

  --   -- --   where ih : RRel (S n) (flatten (RRel (S n)) (flatten (RRel (S (S n))) coh)) (w , Œ± , r)
  --   -- --                         (flatten-frm (RRel (S n)) (flatten (RRel (S (S n))) coh))
  --   -- --         ih = n-glob n w Œ± r (flatten (RRel (S (S n))) coh)


